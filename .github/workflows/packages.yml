#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build Packages

on:
  repository_dispatch:
    types: [packages]
  workflow_dispatch:
    inputs:
      INPUT_TARGET:
        description: "Target to build (platform/target/subtarget)"
        required: false
        default: "all"

env:
  SOURCE_URL: https://github.com/immortalwrt/immortalwrt
  SOURCE_BRANCH: openwrt-18.06-k5.4
  CURRENT_BRANCH: main
  WEB_ROOT_PATH: /data/dnmp/www/openwrt.cc
  SDK_TAG: sdk
  TOOLCHAIN_TAG: toolchain
  TZ: Asia/Shanghai

jobs:
  Config:
    name: Generate Config
    runs-on: ubuntu-latest
    outputs:
      TARGETS: ${{ steps.find-targets.outputs.TARGETS }}

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Clone Source Code
        run: |
          git clone --depth=1 $SOURCE_URL -b $SOURCE_BRANCH openwrt

      - name: Find Targets
        id: find-targets
        run: |
          if [ "${{ github.event.inputs.INPUT_TARGET }}" == "all" ]; then
            export TARGETS="$(cat $GITHUB_WORKSPACE/data/support/platform.config)"
          else
            export TARGETS="${{ github.event.inputs.INPUT_TARGET }}"
          fi
          cd openwrt
          JSON='{"config": ["default"], "targets":['
          FIRST=1
          for TARGET in $TARGETS; do
          [[ $FIRST -ne 1 ]] && JSON="$JSON"','
          JSON="$JSON"'"'"${TARGET}"'"'
          FIRST=0
          done
          JSON="$JSON"']}'
          echo $JSON
          echo "::set-output name=TARGETS::$JSON"

  Packages:
    name: Packages ${{ matrix.TARGETS }}
    needs: [Config]
    runs-on: packages
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix: ${{fromJson(needs.Config.outputs.TARGETS)}}

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Generate Variables
        id: env
        run: |
          export SOURCE_OWNER=$(echo $SOURCE_URL | awk -F '/' '{print $(NF-1)}')
          echo "SOURCE_OWNER=$SOURCE_OWNER" >> $GITHUB_ENV
          export SOURCE_REPO=$(echo $SOURCE_URL | awk -F '/' '{print $(NF)}')
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          export DEVICE_PLATFORM=$(echo ${{ matrix.TARGETS }} | awk -F '/' '{print $1}')
          echo "DEVICE_PLATFORM=$DEVICE_PLATFORM" >> $GITHUB_ENV
          export DEVICE_TARGET=$(echo ${{ matrix.TARGETS }} | awk -F '/' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          export DEVICE_SUBTARGET=$(echo ${{ matrix.TARGETS }} | awk -F '/' '{print $3}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

      - name: Prepare SDK
        run: |
          export SDK_URL=$(curl -fsSL https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/$SDK_TAG \
            | grep browser_download_url | grep ${DEVICE_TARGET}-${DEVICE_SUBTARGET} | awk -F '"' '{print $(NF-1)}')
          curl -sL $SDK_URL | tar -xJ
          cd immortalwrt-sdk-$DEVICE_TARGET-$DEVICE_SUBTARGET*
          echo "OPENWRT_SDK_PATH=$PWD" >> $GITHUB_ENV

      - name: Import Build Keys
        env:
          BUILD_PRIVATEKEY: ${{ secrets.BUILD_PRIVATEKEY }}
          BUILD_PUBLICKEY: ${{ secrets.BUILD_PUBLICKEY }}
        if: env.BUILD_PRIVATEKEY != null && env.BUILD_PUBLICKEY != null
        run: |
          cd $OPENWRT_SDK_PATH
          echo -e "$BUILD_PRIVATEKEY" > key-build
          echo -e "$BUILD_PUBLICKEY" > key-build.pub
          wc -c key-build key-build.pub

      - name: Install Feeds
        run: |
          cd $OPENWRT_SDK_PATH
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate Config File
        run: |
          cd $OPENWRT_SDK_PATH
          echo CONFIG_TARGET_${DEVICE_TARGET}=y > .config
          echo CONFIG_TARGET_${DEVICE_TARGET}_${DEVICE_SUBTARGET}=y >> .config
          cat $GITHUB_WORKSPACE/config/packages.config >> .config
          echo -e "\n---- Original Config Start ----\n"
          cat .config
          echo -e "\n---- Original Config End ----\n"
          make defconfig
          echo -e "\n---- Whole Config Start ----\n"
          cat .config
          echo -e "\n---- Whole Config End ----\n"

      - name: Download Source Packages
        run: |
          cd $OPENWRT_SDK_PATH
          cp -rf /data/cache/dl .
          make download -j64

      - name: Compile Kmods
        run: |
          cd $OPENWRT_SDK_PATH
          make target/compile -j$(nproc) IGNORE_ERRORS="m n" BUILD_LOG=1 || \
          yes n | make target/compile -j1 V=s IGNORE_ERRORS=1

      - name: Compile Packages
        run: |
          cd $OPENWRT_SDK_PATH
          make package/compile -j$(nproc) IGNORE_ERRORS="y m n" BUILD_LOG=1

      - name: Generate Packages Index
        run: |
          cd $OPENWRT_SDK_PATH
          make package/index V=s PACKAGE_SUBDIRS=bin/packages/$DEVICE_PLATFORM/

      - name: Collect Failed Logs
        if: always()
        run: |
          cd $OPENWRT_SDK_PATH
          echo 'Build Failed Packages:'
          cat logs/package/error.txt | awk '{print $2}'
          cat logs/package/error.txt | awk '{print $2}' | sed 's/$/&\//g' | tee failed-packages.txt
          mkdir -p faillogs
          rsync -aq --files-from=failed-packages.txt logs/ faillogs/
          cp -f logs/package/error.txt faillogs

      - name: Deploy Files To Backblaze
        continue-on-error: true
        env:
          B2_APPLICATION_KEY: "${{ secrets.B2_APPLICATION_KEY }}"
          B2_APPLICATION_KEY_ID: "${{ secrets.B2_APPLICATION_KEY_ID }}"
          SOURCE_PACKAGES: "${{ env.OPENWRT_SDK_PATH }}/bin/packages/${{ env.DEVICE_PLATFORM }}/"
          DEST_PACKAGES: "b2://${{ secrets.B2_BUCKETNAME }}/snapshots/packages/${{ env.DEVICE_PLATFORM }}/"
        if: env.B2_APPLICATION_KEY != null && env.B2_APPLICATION_KEY_ID != null
        run: |
          b2 authorize-account $B2_APPLICATION_KEY_ID $B2_APPLICATION_KEY
          b2 sync --noProgress --replaceNewer $SOURCE_PACKAGES $DEST_PACKAGES

      - name: Deploy FailLogs To Backblaze
        continue-on-error: true
        env:
          B2_APPLICATION_KEY: "${{ secrets.B2_APPLICATION_KEY }}"
          B2_APPLICATION_KEY_ID: "${{ secrets.B2_APPLICATION_KEY_ID }}"
          SOURCE_FAILLOGS: "${{ env.OPENWRT_SDK_PATH }}/faillogs/"
          DEST_FAILLOGS: "b2://${{ secrets.B2_BUCKETNAME }}/snapshots/faillogs/packages/"
        if: env.B2_APPLICATION_KEY != null && env.B2_APPLICATION_KEY_ID != null
        run: |
          b2 authorize-account $B2_APPLICATION_KEY_ID $B2_APPLICATION_KEY
          b2 sync --noProgress --replaceNewer $SOURCE_FAILLOGS $DEST_FAILLOGS

      # - name: Upload Failed Logs To Artifact
      #   if: always()
      #   uses: actions/upload-artifact@main
      #   with:
      #     name: Logs-${{ env.DEVICE_PLATFORM }}
      #     path: ${{ env.OPENWRT_SDK_PATH }}/faillogs
      #     if-no-files-found: ignore

      # - name: Deploy Failed Logs To Server
      #   env:
      #     HOST: "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}"
      #     SOURCE_FAILLOGS: "${{ env.OPENWRT_SDK_PATH }}/faillogs/"
      #     DEST_FAILLOGS: "${{ env.WEB_ROOT_PATH }}/buildbot/faillogs/packages/${{ env.DEVICE_PLATFORM }}/"
      #     SERVER_PRIVATEKEY: "${{ secrets.SERVER_PRIVATEKEY }}"
      #   if: env.SERVER_PRIVATEKEY != null && always()
      #   run: |
      #     mkdir -p ~/.ssh/
      #     install -m 600 /dev/null ~/.ssh/id_rsa
      #     echo "${{ secrets.SERVER_PRIVATEKEY }}" > ~/.ssh/id_rsa
      #     chmod 600 ~/.ssh/id_rsa
      #     ssh -q -t -i ~/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $HOST bash -c "'mkdir -p $DEST_FAILLOGS'"
      #     rsync -chavP --delete -e 'ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no' $SOURCE_FAILLOGS $HOST:$DEST_FAILLOGS

      # - name: Deploy Files To Server
      #   env:
      #     HOST: "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}"
      #     SOURCE_PACKAGES: "${{ env.OPENWRT_SDK_PATH }}/bin/packages/${{ env.DEVICE_PLATFORM }}/"
      #     DEST_PACKAGES: "${{ env.WEB_ROOT_PATH }}/buildbot/packages/${{ env.DEVICE_PLATFORM }}/"
      #     SERVER_PRIVATEKEY: "${{ secrets.SERVER_PRIVATEKEY }}"
      #   if: env.SERVER_PRIVATEKEY != null
      #   run: |
      #     mkdir -p ~/.ssh/
      #     install -m 600 /dev/null ~/.ssh/id_rsa
      #     echo "${{ secrets.SERVER_PRIVATEKEY }}" > ~/.ssh/id_rsa
      #     chmod 600 ~/.ssh/id_rsa
      #     ssh -q -t -i ~/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $HOST \
      #     bash -c "'mkdir -p $DEST_PACKAGES'"
      #     rsync -chavP --delete -e 'ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no' $SOURCE_PACKAGES $HOST:$DEST_PACKAGES

      - name: Clean Process
        if: always()
        run: |
          mkdir -p empty
          sudo rsync --delete-before --force -r empty/ $OPENWRT_SDK_PATH/
          rm -rf empty $OPENWRT_SDK_PATH

  Trigger-Workflow:
    needs: [Config, Packages]
    name: Trigger Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Trigger A New Workflow
        if: always()
        env:
          REPOSITORY_DISPATCH_SECRET: "${{ secrets.REPOSITORY_DISPATCH_SECRET }}"
        run: |
          curl -X POST https://api.github.com/repos/$GITHUB_REPOSITORY/dispatches \
            -H "Accept: application/vnd.github.everest-preview+json" \
            -H "Authorization: token $REPOSITORY_DISPATCH_SECRET" \
            --data '{"event_type": "packages"}'
